@function length($list)
    $count: 0
    @each $item in $list
        $count: $count + 1
    @return $count

@function paveList($masonry, $list)
    $listLength: length($list)
    $output: ()
    @for $i from 1 through $listLength
        $output: append($output, (nth($list, $i)))
        @if $i < $listLength
            $output: append($output, $masonry) 
    @return $output

@function createFractions($x, $points)
    $arguments: ()
    $functions: ()
    @each $arg, $func in $points
        $arguments: append($arguments, $arg)
        $functions: append($functions, $func)
    $n: length($points)
    $nR: ()
    $dR: ()
    @for $i from 1 through $n
        $bufferDr: 1
        $bufferNr: ()
        @for $j from 1 through $n
            @if $j != $i
                $bufferNr: append($bufferNr, '(#{$x} - #{nth($arguments, $j)}px)')
                $number: nth($arguments, $i) - nth($arguments, $j)
                $bufferDr: $bufferDr * $number
        $dR: append($dR, $bufferDr)
        $nR: append($nR, $bufferNr)
    @return (nR: $nR, dR: $dR, funcs: $functions)

@function LagrangeCalc($x, $points)
    $fractions: createFractions($x, $points)
    $dR: map-get($fractions, 'dR')
    $nR: map-get($fractions, 'nR')
    $funcs: map-get($fractions, 'funcs')
    $output: ()
    @for $i from 1 through length($dR)
        $item: paveList('*', nth($nR, $i))
        $result: '(#{$item} * #{nth($funcs, $i) / nth($dR, $i)})'
        $output: append($output, $result)
    $output: paveList('+', $output)
    @return $output